import os

from DownloaderForReddit.database import Content
from DownloaderForReddit.database.model_enums import DuplicateControlMethod
from DownloaderForReddit.messaging.message import Message
from DownloaderForReddit.utils import injector, system_util, general_utils
from DownloaderForReddit.utils.filename_generator import FilenameGenerator


class DuplicateHandler:

    """
    Manages duplicate content based on specific control methods.

    This class provides functionality to detect duplicates, handle duplicate content through methods like renaming or
    deletion, and manages internal setup required for the duplicate operations. It interacts with external dependencies,
    including database handlers and file utilities.

    :ivar settings_manager: Handles application settings for configuring duplicate handling behavior.
    :type settings_manager: SettingsManager
    :ivar content: The content object being processed for duplicate management.
    :type content: Content
    :ivar post: Post object associated with the content being processed.
    :type post: Post
    :ivar sig_ro: The significant RedditObject (User or Subreddit) associated with the content post.
    :type sig_ro: RedditObject
    """

    @classmethod
    def is_duplicate(cls, content: Content) -> bool:
        """
        Determines if the provided content is a duplicate, based on its MD5 hash. This method checks if content with
        the same MD5 hash already exists in the database.

        :param content: The content object to verify for duplication.
        :return: True if the provided content is a duplicate, False otherwise.
        """
        if content.md5_hash is None:
            return False
        db_handler = injector.get_database_handler()
        with db_handler.get_scoped_session() as session:
            dup = session.query(Content).filter_by(md5_hash=content.md5_hash).first()
            return dup is not None

    def __init__(self, content: Content):
        """
        Initializes the instance of the class and sets up its initial state.

        The constructor initializes a settings manager, assigns the provided content, and sets default values
        for attributes `post` and `sig_ro`. It also calls the `setup` method to perform additional
        configurations.

        :param content: The content object to be assigned to the instance.
        """
        self.settings_manager = injector.get_settings_manager()
        self.content = content
        self.post = None
        self.sig_ro = None
        self.setup()

    def setup(self) -> None:
        self.post = self.content.post
        self.sig_ro = self.post.significant_reddit_object

    def handle_duplicate(self) -> None:
        """
        Handles duplicate conditions based on the defined control method of the contents significant reddit object.

        The function evaluates the configured control method for duplicates and performs the corresponding action.
        If the control method specifies deletion, the duplicate is removed. If the method specifies moving, the
        duplicate is renamed.
        """
        ctrl_method = self.sig_ro.duplicate_control_method
        if ctrl_method == DuplicateControlMethod.DELETE:
            self.delete_duplicate()
        elif ctrl_method == DuplicateControlMethod.MOVE:
            self.rename_duplicate()

    def delete_duplicate(self) -> None:
        """
        Deletes a duplicate file associated with the current content object. The deletion process includes removing
        the physical file from the file system and sending a debug message with relevant details for user transparency.

        :raises FileNotFoundError: If the file specified by the content's file path could not be found on the system.
        """
        file_path = self.content.get_full_file_path()
        system_util.delete_file(file_path)
        Message.send_debug(
            f'Duplicate deleted: {self.content.title}\n{self.content.url}\n{self.sig_ro.name}\n{file_path}'
        )

    def rename_duplicate(self) -> None:
        """
        Renames a file identified as a duplicate by generating a new file name and moving it to the updated file path.

        This method uses a `FilenameGenerator` object to create a base directory path and a new title for the duplicate
        file. The new file path is then generated by combining the base path, new title, and the file extension. The
        file is moved from its original location to the new file path and a debug message is sent containing the old
        file name, new file title, its source URL, signal information, and original file path.

        :param self: The instance of the class that contains the method.
        """
        previous_file_path = self.content.get_full_file_path()
        filename_generator = FilenameGenerator(self.content, is_duplicate=True)
        base_path = filename_generator.make_dir_path()
        title = filename_generator.make_title()
        new_path = self.combine_file_path(base_path, title, self.content.extension)
        new_path = general_utils.ensure_file_path(new_path)
        os.rename(previous_file_path, new_path)
        Message.send_debug(
            f'Duplicate renamed: {self.content.title}\n{self.content.url}\n{self.sig_ro.name}\n{previous_file_path}'
        )

    @staticmethod
    def combine_file_path(base_path: str, title: str, extension: str) -> str:
        return system_util.join_path(base_path, f'{title}.{extension}')
